# Generated by Django 3.0 on 2023-04-01 15:17

from django.db import migrations

def get_fields(model, exclude={}):
    return {
        field.name for field in model._meta.fields if field.name not in exclude
    }


def get_create_vals(apps, row, fields, destination_app, models_name):
    vals = {}
    for field in fields:
        value = getattr(row, field)
        if hasattr(value, 'id'):
            model = type(value)
            if model.__name__ in models_name:
                model = apps.get_model(destination_app, model.__name__)
            value_vals = {v_field: getattr(value, v_field) for v_field in
                          get_fields(model, exclude={'id'})}
            try:
                value, created = model.objects.get_or_create(**value_vals)
            except Exception:
                value = model.objects.filter(**value_vals)[0]
        vals[field] = value
    return vals


def copy_data(apps, schema_editor):
    source_app = 'oc_lettings_site'
    destination_app = 'profiles'
    models_name = {obj.__name__ for obj in apps.get_app_config(
        destination_app).models.values()}

    for model_to_copy in models_name:

        SourceModel = apps.get_model(source_app, model_to_copy)
        DestinationModel = apps.get_model(destination_app, model_to_copy)
        fields = get_fields(SourceModel, exclude={'id'})
        new_lines = []
        for row in SourceModel.objects.all():
            vals = get_create_vals(apps, row, fields, destination_app, models_name)
            try:
                DestinationModel.objects.get(**vals)
            except (
                    DestinationModel.DoesNotExist,
                    DestinationModel.MultipleObjectsReturned):
                new_lines.append(DestinationModel(**vals))
        DestinationModel.objects.bulk_create(new_lines)


class Migration(migrations.Migration):

    dependencies = [
        ('profiles', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(copy_data),
    ]
